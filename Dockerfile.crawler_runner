# docker build -t dejour-crawler-runner:latest -f Dockerfile.crawler_runner .

# run for testing
# docker run -it --env-file .env -p 9000:8080 dejour-crawler-runner:latest

# aws ecr get-login-password --region us-east-1 | docker login -u AWS --password-stdin 037556591838.dkr.ecr.us-east-1.amazonaws.com

# aws ecr create-repository --repository-name dejour-crawler-runner --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE
# ^ will fail if repo already exists

# docker tag  dejour-crawler-runner:latest 037556591838.dkr.ecr.us-east-1.amazonaws.com/dejour-crawler-runner:latest

# docker push 037556591838.dkr.ecr.us-east-1.amazonaws.com/dejour-crawler-runner:latest

# don't forget to bump up the AWS lambda runtime and memory constraints -- 5gb mem should do the trick

FROM public.ecr.aws/lambda/python:3.9

# Install necessary dependencies
RUN yum -y install wget unzip xorg-x11-server-Xvfb \
    && yum -y install libXcomposite libXcursor libXdamage libXext libXi libXtst libXrandr libXss libXinerama libX11-xcb libxcb libxcb-xfixes libxcb-xkb libxkbcommon libxkbcommon-x11 libxcb-dri3 libxcb-render libxcb-shape libxcb-shm libxcb-sync libxcb-xfixes libxshmfence libdrm libgbm libwayland-server \
    && yum -y install cups-libs \
    && yum -y install libXScrnSaver \
    && yum -y install alsa-lib \
    && yum -y install pango cairo cairo-gobject \
    && yum -y install atk \
    && yum -y install atkmm \
    && yum -y install gdk-pixbuf2 \
    && yum -y install gtk3 \
    && yum -y install libxslt \
    && yum -y install libnotify \
    && yum -y install nss \
    && yum -y install GConf2

# Install the function's dependencies using file requirements.txt
# from your project folder.
COPY requirements.txt  .
RUN  pip3 install -r requirements.txt --target "${LAMBDA_TASK_ROOT}"

# Copy function code
COPY . ${LAMBDA_TASK_ROOT}

# Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)
CMD [ "crawler_runner.lambda_handler" ]
